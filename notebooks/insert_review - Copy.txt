{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cdc2bb41",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import cx_Oracle  # for Oracle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8d01089",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table BANKS1 already exists.\n",
      "Table REVIEWS1 already exists.\n",
      "✅ All data inserted successfully.\n"
     ]
    }
   ],
   "source": [
    "# Load cleaned data\n",
    "df = pd.read_csv(\"../data/reviews_with_sentimentfinal.csv\")\n",
    "# Rename date column to review_date to match DB column\n",
    "df.rename(columns={\"date\": \"review_date\"}, inplace=True)\n",
    "\n",
    "# Convert review_date to string with datetime format including time\n",
    "df['review_date'] = pd.to_datetime(df['review_date']).dt.strftime('%Y-%m-%d %H:%M:%S')\n",
    "\n",
    "# Oracle DB connection info — adjust host, port, service_name, user, password\n",
    "dsn = cx_Oracle.makedsn(\"localhost\", 1521, service_name=\"XEPDB1\")\n",
    "conn = cx_Oracle.connect(user=\"BANK_REVIEWS1\", password=\"4446\", dsn=dsn)\n",
    "cur = conn.cursor()\n",
    "\n",
    "# Step 1: Create BANKS1 table (if not exists)\n",
    "try:\n",
    "    cur.execute(\"\"\"\n",
    "    CREATE TABLE BANKS1 (\n",
    "        bank_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,\n",
    "        bank_name VARCHAR2(100) UNIQUE NOT NULL\n",
    "    )\n",
    "    \"\"\")\n",
    "    print(\"Created table BANKS1.\")\n",
    "except cx_Oracle.DatabaseError as e:\n",
    "    error_obj, = e.args\n",
    "    if error_obj.code == 955:  # table already exists\n",
    "        print(\"Table BANKS1 already exists.\")\n",
    "    else:\n",
    "        raise\n",
    "\n",
    "# Step 2: Create REVIEWS1 table (if not exists)\n",
    "try:\n",
    "    cur.execute(\"\"\"\n",
    "    CREATE TABLE REVIEWS1 (\n",
    "        review_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,\n",
    "        review CLOB,\n",
    "        rating NUMBER(2),\n",
    "        review_date TIMESTAMP,\n",
    "        bank VARCHAR2(100),\n",
    "        source VARCHAR2(50),\n",
    "        translated_review CLOB,\n",
    "        lang_detected VARCHAR2(10),\n",
    "        sentiment_label VARCHAR2(20),\n",
    "        sentiment_score FLOAT,\n",
    "        bank_id NUMBER,\n",
    "        CONSTRAINT fk_bank FOREIGN KEY (bank_id) REFERENCES BANKS1(bank_id)\n",
    "    )\n",
    "    \"\"\")\n",
    "    print(\"Created table REVIEWS1.\")\n",
    "except cx_Oracle.DatabaseError as e:\n",
    "    error_obj, = e.args\n",
    "    if error_obj.code == 955:  # table already exists\n",
    "        print(\"Table REVIEWS1 already exists.\")\n",
    "    else:\n",
    "        raise\n",
    "\n",
    "conn.commit()\n",
    "\n",
    "# Step 3: Insert unique banks and get their bank_id\n",
    "bank_id_map = {}\n",
    "for bank_name in df['bank'].unique():\n",
    "    cur.execute(\"\"\"\n",
    "        MERGE INTO BANKS1 b\n",
    "        USING (SELECT :1 AS bank_name FROM dual) src\n",
    "        ON (b.bank_name = src.bank_name)\n",
    "        WHEN NOT MATCHED THEN\n",
    "            INSERT (bank_name) VALUES (:1)\n",
    "    \"\"\", (bank_name,))\n",
    "    conn.commit()\n",
    "\n",
    "    cur.execute(\"SELECT bank_id FROM BANKS1 WHERE bank_name = :1\", (bank_name,))\n",
    "    bank_id = cur.fetchone()[0]\n",
    "    bank_id_map[bank_name] = bank_id\n",
    "\n",
    "# Step 4: Insert reviews with datetime including time\n",
    "for _, row in df.iterrows():\n",
    "    cur.execute(\"\"\"\n",
    "        INSERT INTO REVIEWS1 (\n",
    "            review, rating, review_date, bank, source,\n",
    "            translated_review, lang_detected,\n",
    "            sentiment_label, sentiment_score, bank_id\n",
    "        )\n",
    "        VALUES (:1, :2, TO_TIMESTAMP(:3, 'YYYY-MM-DD HH24:MI:SS'), :4, :5, :6, :7, :8, :9, :10)\n",
    "    \"\"\", (\n",
    "        row['review'], row['rating'], row['review_date'], row['bank'], row['source'],\n",
    "        row['translated_review'], row['lang_detected'],\n",
    "        row['sentiment_label'], row['sentiment_score'],\n",
    "        bank_id_map[row['bank']]\n",
    "    ))\n",
    "\n",
    "conn.commit()\n",
    "print(\"✅ All data inserted successfully.\")\n",
    "\n",
    "# Close connections\n",
    "cur.close()\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ff6d69e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID: 6130, Bank: Cbe, Rating: 4, Date: 2025-03-16 02:38:53, Review: 1.we can't get mobile Token on CBE App or any other online. This is need to improve 2.internet banki...\n",
      "ID: 6131, Bank: Cbe, Rating: 5, Date: 2025-03-15 11:50:11, Review: excellent app for account transaction specially for bussiness customers and a good method to pay bil...\n",
      "ID: 6132, Bank: Cbe, Rating: 3, Date: 2025-03-14 14:33:09, Review: The app has brought a new problem. When i open the app, it closes itself then i have to open it agai...\n",
      "ID: 6133, Bank: Cbe, Rating: 5, Date: 2025-03-14 03:57:49, Review: In my view, I can't give any conclusion because it's the starting of an online banking in my country...\n",
      "ID: 6134, Bank: Cbe, Rating: 5, Date: 2025-03-13 21:59:19, Review: Very attractive and user-friendly...\n"
     ]
    }
   ],
   "source": [
    "import cx_Oracle\n",
    "\n",
    "dsn = cx_Oracle.makedsn(\"localhost\", 1521, service_name=\"XEPDB1\")\n",
    "conn = cx_Oracle.connect(user=\"BANK_REVIEWS1\", password=\"4446\", dsn=dsn)\n",
    "cur = conn.cursor()\n",
    "\n",
    "cur = conn.cursor()\n",
    "\n",
    "cur.execute(\"\"\"\n",
    "    SELECT r.review_id, r.review, r.rating, r.review_date, b.bank_name\n",
    "    FROM REVIEWS1 r\n",
    "    JOIN BANKS1 b ON r.bank_id = b.bank_id\n",
    "    WHERE ROWNUM <= 5\n",
    "\"\"\")\n",
    "\n",
    "rows = cur.fetchall()\n",
    "for row in rows:\n",
    "    review_text = row[1].read() if row[1] is not None else \"\"\n",
    "    print(f\"ID: {row[0]}, Bank: {row[4]}, Rating: {row[2]}, Date: {row[3]}, Review: {review_text[:100]}...\")\n",
    "\n",
    "cur.close()\n",
    "conn.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
